실행방법

npm start

ngrok authtoken 1eam612ugPiyDCrUAiahAHJLKXC_5pt79fCFvxwDUswcnjvfT

ngrok http 3000




const DIALOG_ID = 'report_hours_dialog_1';
const reportHoursDialog = new BotkitConversation(DIALOG_ID, controller);

reportHoursDialog.say('Hello');
reportHoursDialog.ask(
  'ぐるなびテスト',
  [
    {
      pattern: 'yes',
      async handler(answer, convo, bot) {
        await convo.gotoThread('has_hours');
      },
    },
    {
      pattern: 'no',
      async handler(answer, convo, bot) {
        await convo.gotoThread('has_no_hours');
      },
    },
  ],
  { key: 'stories' },
);

reportHoursDialog.addQuestion(
  'How many hours did you work?',
  async (response, convo, bot) => {
    console.log(response);
  },
  'hours',
  'has_hours',
);

reportHoursDialog.addMessage('Thank you, you reported {{vars.hours}} hours.', 'has_hours');
reportHoursDialog.addMessage('Thank you', 'has_no_hours');

controller.addDialog(reportHoursDialog);

controller.ready(() => {
  controller.hears(['ぐるなび'], botScope, async (bot, message) => {
    await bot.beginDialog(DIALOG_ID);
  });
});










const DIALOG_ID = 'gurunavi';
const gurunaviConv = new BotkitConversation(DIALOG_ID, controller);

gurunaviConv.say('ぐるなびテスト');
gurunaviConv.ask(  '食べ物（とんかつ、ラーメンなど）',async(response, convo, bot)=>{
	console.log(`食べ物は ${ response }`);
});
//   [
//     {
//       pattern: 'yes',
//       async handler(answer, convo, bot) {
//         await convo.gotoThread('has_hours');
//       },
//     },
//     {
//       pattern: 'no',
//       async handler(answer, convo, bot) {
//         await convo.gotoThread('has_no_hours');
//       },
//     },
//   ],
//   { key: 'stories' },
// );

// gurunaviConv.addQuestion(
//   'How many hours did you work?',
//   async (response, convo, bot) => {
//     console.log(response);
//   },
//   'hours',
//   'has_hours',
// );

// gurunaviConv.addMessage('Thank you, you reported {{vars.hours}} hours.', 'has_hours');
// gurunaviConv.addMessage('Thank you', 'has_no_hours');

// controller.addDialog(gurunaviConv);

controller.ready(() => {
  controller.hears(['ぐるなび'], botScope, async (bot, message) => {
    await bot.beginDialog(DIALOG_ID);
  });
});



//ぐるなび
const DIALOG_ID = 'gurunavi';
const gurunaviConv = new BotkitConversation(DIALOG_ID, controller);
const keyid = CONFIG.GurunaviKEY;
var result = '';

gurunaviConv.say('ぐるなびテスト');
gurunaviConv.ask('食べたいもの入力して（とんかつ、ラーメンなど）',async(response, convo, bot)=>{
	gurunaviConv.say(`OK ${response} で調べる`);
	// await convo.gotoThread('has_hours');
	var encodegurunavi = encodeURIComponent( response )
	var URL = 'https://api.gnavi.co.jp/RestSearchAPI/v3/?keyid=' + keyid + '&name=' + encodegurunavi
	request.get({
		uri : URL
	},function(err,res,body){
		var jData = JSON.parse(body);
		var jerror = JSON.parse(err);
		if(err){
			console.log('에러발생');
			console.log(err);
		}else{
			jData["rest"].forEach(function(item){
				result = result + item.name 
			});
			result = result.split(" ").join("\n")
			// console.log(result);	
			gurunaviConv.say(URL);
		}	
	});
  }, {key: 'name'});;


controller.addDialog(gurunaviConv);

controller.ready(() => {
  controller.hears(['ぐるなび'], botScope, async (bot, message) => {
    await bot.beginDialog(DIALOG_ID);
  });
});
//ぐるなび